// CMVSEncode.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
#include "Image.h"

char hexData[] = {
	0x4A, 0x42, 0x50, 0x44, 0x2C, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC0, 0x58, 0x50, 0x00, 0x00, 0x00, 0x00, 0x05, 0xD0, 0x02,
	0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

char hexData1[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00 };

char hexData2[164] = {
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x05, 0x0F, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0D, 0x10, 0x0D, 0x10, 0x0D, 0x10, 0x0D, 0x10,
	0x0D, 0x10, 0x00, 0x00
};

bool SortByFreq4(freqzero x, freqzero y) {
	return x.numofpadding < y.numofpadding;
}


int wmain(int argc, wchar_t**argv)
{
    BMPImage in = readImage(L"E:\\vmvt\\op\\still_509800701.png");
    //BMPImage in = readImage(L"F:\\scan2.png");

    RGBToYCbCr(in);
	reSampleBlock(in);

    forwardDCT(in);
    quantize(in);

	JBPDImage image = BuildTrees(in);

	std::vector<byte> huffmanData;
    GetScanData(image, huffmanData);

    std::ofstream outFile("E:\\vmvt\\op\\0000251.png.out", std::ios::out | std::ios::binary);
    outFile.write(hexData, 28);
	outFile.write((char*)&image.DCScanSize, 4);
	outFile.write((char*)&image.ACScanSize, 4);
	outFile.write(hexData1, 12);

	for (uint i = 0; i < 16; ++i)
	{
		outFile.write((char*)&image.DC_freq[i], 4);
	}
	for (uint i = 0; i < 16; ++i)
	{
		outFile.write((char*)&image.AC_freq[i], 4);
	}
	std::sort(image.AC_zero, image.AC_zero + 16, SortByFreq4);
	for (uint i = 0; i < 16; ++i)
	{
		outFile.write((char*)&image.AC_zero[i].numofzero, 1);
	}
	outFile.write(hexData2, 164);
    outFile.write((char*)&huffmanData[0], huffmanData.size());
    outFile.close();
    std::cout << "Fin";
}


